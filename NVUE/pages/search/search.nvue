<template>
	<view class="page">
		<!-- 搜索页 -->
		<list v-if="!show_result" show-scrollbar="false" class="content search-page">
			<cell class="title" v-if="false">
				<text class="title-text">历史记录</text>
			</cell>
			<cell class="search-history"></cell>
			<cell class="title">
				<text class="title-text">热搜榜</text>
			</cell>
			<cell class="hot-item" v-for="(item, index) in hot_list" :key="index" @tap="hot_search(item)">
				<view class="hot-item-index">
					<text class="index-text">{{index + 1}}</text>
				</view>
				<view class="hot-info">
					<text class="key_word">{{item.searchWord}}</text>
					<text class="description">{{item.content}}</text>
				</view>
			</cell>
		</list>
		<!-- 搜索页END -->
		
		<!-- 搜索结果页 -->
		<list v-else show-scrollbar="false" class="content result-page" style="background-color: #00B26A;">
			<cell>
				<text>搜索结果</text>
			</cell>
		</list>
		<!-- 搜索结果页END -->
		
		<wyy-play v-if="played"></wyy-play>
	</view>
</template>

<script>
	import wyyPlay from '@/components/wyy-play/wyy_play.nvue';
	import $repeater from '@/utils/repeater.js';
	
	export default {
		components: {
			wyyPlay
		},
		data() {
			return {
				hot_list: [],
				show_result: false,
			}
		},
		computed: {
			played: function() {
				return this.$store.state.played;
			},
		},
		onBackPress() {
			// 如果当前显示的是搜索结果页, 则拦截返回事件, 并关闭结果页
			if (this.show_result) {
				this.close_result_page();
				return true;
			}
		},
		created() {
			uni.$on('search', this.search);
			this.get_hot_list()
		},
		beforeDestroy() {
			uni.$off('search');
		},
		methods: {
			hot_search(hot) {
				this.search(hot.searchWord);
			},
			on_search(e) {
				this.search(e.keyword)
			},
			search(keyword) {
				console.log(keyword);
				this.open_result_page();
				
				$repeater.search.search(keyword, 10, 0, (data)=> {
					console.log(data);
				});
			},
			close_result_page() {
				this.show_result = false; //关闭结果页
			},
			open_result_page() {
				this.show_result = true; //打开结果页
			},
			
			get_hot_list() {
				$repeater.search.get_hot_list((data)=> {
					
					let hot_list = data.data;
					//部分介绍结尾可能有换行符\n,需要去掉不然会扰乱样式
					hot_list.forEach((item)=> {
						item.content = item.content.trim();
					})
					this.hot_list = hot_list;
				});
			}
		}
	}
</script>

<style>
	.page{
		flex: 1;
	}
	.title-text {
		font-size: 24rpx;
		font-weight: bold;
		color: #000000;
	}
	.title {
		height: 80rpx;
		width: 750rpx;
		padding: 0 30rpx;
		justify-content: center;
	}
	.content {
		margin-bottom: 90rpx; 
		width: 750rpx; 
		flex: 1;
	}
	.hot-item {
		width: 750rpx;
		height: 100rpx;
		flex-direction: row;
	}
	.hot-item:active {
		background-color: rgba(0,0,0,0.1);
	}
	.hot-item-index {
		justify-content: center;
		align-items: center;
		width: 100rpx;
	}
	.index-text {
		font-size: 26rpx;
		color: rgba(0,0,0,0.3);
	}
	.hot-info {
		width: 650rpx;
		height: 100rpx;
		justify-content: center;
	}
	.key_word {
		font-size: 26rpx;
	}
	.description {
		font-size: 18rpx;
		color: rgba(0,0,0,0.3);
		margin-top: 10rpx;
	}
	
</style>
