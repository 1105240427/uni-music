<template>
	<div>

		<div v-if="drag" class="wrap tab-bar-scroll">
			<div class="menu" @click="menuClick">
				<image class="menu-icon" src="../../static/menu.png"></image>
			</div>
			<scroller class="scroll" scrollDirection="horizontal" showScrollbar="false">

				<div class="tab-bar-item tab-bar-scroll-width" v-for="(tabBar, t) in tabBars" :key="t" :ref="tabBar.id + t" @click="change(t)">
					<text class="tab-bar-title" :class="[tabIndex === t ? 'active' : '']">{{
						tabBar.name
					}}</text>
				</div>
			</scroller>
			<div class="search" @click="searchClick">
				<image class="search-icon" src="../../static/search.png"></image>
			</div>
		</div>
		<div v-else class="wrap tab-bar">
			<div class="tab-bar-item" v-for="(tabBar, t) in tabBars" :key="t" :ref="tabBar.id + t" @click="change(t)">
				<text class="tab-bar-title" :class="[tabIndex === t ? 'active' : '']">{{
					tabBar.name
				}}</text>
			</div>
		</div>

		<wxc-popup :width="sideBarWidth" popupColor="rgba(0, 0, 0, 0.3)" :show="isBottomShow" @wxcPopupOverlayClicked="popupOverlayBottomClick" pos="left">
			<slot></slot>
		</wxc-popup>

	</div>
</template>

<script>
	import {
		WxcPopup
	} from 'weex-ui';
	const dom = weex.requireModule('dom');
	const navigator = weex.requireModule('navigator');
	
	export default {
		components: {
			WxcPopup
		},
		props: {
			sideBarWidth: {
				type: Number,
				default: 200
			},
			drag: {
				type: Boolean,
				default: true
			},
			tabBars: {
				type: Array,
				default: function(e) {
					return [];
				}
			},
			tabIndex: {
				type: Number,
				default: 0
			}
		},
		data(){
			return {
				isBottomShow: false
			}
		},
		watch: {
			tabIndex(newVal) {
				this.change(newVal)
			}
		},
		methods: {
			openBottomPopup() {
				this.isBottomShow = true;
			},
			popupOverlayBottomClick() {
				this.isBottomShow = false;
			},
			menuClick() {
				this.isBottomShow = true;
			},
			searchClick() {
				uni.navigateTo({
					url:'/pages/search/search'
				})
			},
			async change(index, e) {
				let ret = {
					index: index
				};

				this.$emit('_tabBarClick', ret);
				const el = this.$refs[this.tabBars[index].id + index][0]
				let elSize = await this.getElSize(el);
				if (elSize.left + elSize.width > 750) {
					let idx = index - 4;
					let newEl = this.$refs[this.tabBars[idx].id + idx][0]
					dom.scrollToElement(newEl, {});
					return;
				}
				if (elSize.left < 0) {
					dom.scrollToElement(el, {});
				}

			},
			getElSize(el) { //得到元素的size
				return new Promise((res, rej) => {
					const result = dom.getComponentRect(el, option => {
						res(option.size);
					})
				})
			}
		}
	};
</script>
<style>
	.demo-image{
		width: 200px;
		height: 200px;
	}
	.wrap {
		height: 90px;
		width: 750px;
		flex-direction: row;

		font-size: 28px;
		background-color: rgba(0, 0, 0, 0.3);

	}

	.tab-bar {
		justify-content: space-between;
		padding-left: 30px;
		padding-right: 30px;
	}

	.scroll {
		height: 90px;
		width: 590px;
		flex-direction: row;
		justify-content: center;
	}

	.tab-bar-item {
		height: 90px;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.tab-bar-scroll-width {
		width: 100px;
	}

	.tab-bar-title {
		height: 90px;
		line-height: 90px;
		font-size: 26px;
		color: #DCDCDC;
	}

	.active {
		color: #FFFFFF;
		font-weight: bold;
		font-size: 30px;
	}

	.menu {
		width: 80px;
		height: 90px;
		flex-direction: row;
		justify-content: center;
		align-items: center;
	}

	.menu-icon {
		width: 35px;
		height: 35px;
	}

	.search {
		width: 80px;
		height: 90px;
		flex-direction: row;
		justify-content: center;
		align-items: center;
	}

	.search-icon {
		width: 35px;
		height: 35px;
	}
</style>
